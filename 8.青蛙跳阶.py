"""
一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。
列举：
台阶   方式
1       1
2       1 1，2
3       1 1 1，1 2，2 1
4       1 1 1 1，1 1 2，1 2 1，2 1 1，2 2
5       1 1 1 1 1，1 1 1 2，1 1 2 1，1 2 1 1，2 1 1 1，2 1 2，2 2 1，1 2 2

分析：n级台阶，假设第一次跳1级，剩下就是n-1
            假设第一次是2姐，剩下就是n-2
设 f(x)=res 函数为传入x，x为层级，输出跳法总数
f(0)=0
f(1)=1
f(2)=2
f(3)=3
又有 无论如何跳，第一步只有1，2两种方式。由此得出
f(n)=f(n-1)+f(n-2)
等价于斐波那契数列 0 1 1 2 3
台阶的结果数列        1 2 3 5
对应台阶的数目    0   1 2 3 4
"""


def feibo(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == 2:
        return 2
    return feibo(n - 1) + feibo(n - 2)


print(feibo(4))

"""
一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。
思想：因为青蛙每次可以跳1，2，3，，，，n级；
假设函数 f(n)=res ,x=层级，res = 结果跳法
当跳 1级 ，跳法 f(n-1)
    2级, 跳法 f(n-2)
    3级，跳法 f(n-3)
    n-1级,跳法 f(1)
    n 级 ，及一次跳完 f(0)
所以可以推论：
f(n)=f(n-1)+f(n-2)+....+f(1)+f(0)
f(n-1) = f(n-2) +f(n-3)+...f(1)+f(0)

所以简化：f(n)=2*f(n-1)

1）这里的f(n) 代表的是n个台阶有一次1,2,...n阶的 跳法数。

2）n = 1时，只有1种跳法，f(1) = 1

3) n = 2时，会有两个跳得方式，一次1阶或者2阶，这回归到了问题（1） ，f(2) = f(2-1) + f(2-2)

4) n = 3时，会有三种跳得方式，1阶、2阶、3阶，

 那么就是第一次跳出1阶后面剩下：f(3-1);第一次跳出2阶，剩下f(3-2)；第一次3阶，那么剩下f(3-3)

 因此结论是f(3) = f(3-1)+f(3-2)+f(3-3)

5) n = n时，会有n中跳的方式，1阶、2阶...n阶，得出结论：

 f(n) = f(n-1)+f(n-2)+...+f(n-(n-1)) + f(n-n) => f(0) + f(1) + f(2) + f(3) + ... + f(n-1)

6) 由以上已经是一种结论，但是为了简单，我们可以继续简化：

 f(n-1) = f(0) + f(1)+f(2)+f(3) + ... + f((n-1)-1) = f(0) + f(1) + f(2) + f(3) + ... + f(n-2)

 f(n) = f(0) + f(1) + f(2) + f(3) + ... + f(n-2) + f(n-1) = f(n-1) + f(n-1)

 可以得出：

 f(n) = 2*f(n-1)


7) 得出最终结论,在n阶台阶，一次有1、2、...n阶的跳的方式时，总得跳法为：

        | 1 ,(n=0 )
f(n) =  | 1 ,(n=1 )
        | 2*f(n-1),(n>=2)

"""


def jumpFloorII(number):
    if number == 0:
        return 0
    elif number == 1:
        return 1
    elif number == 2:
        return 2

    first = 2

    result = 0
    for i in range(3, number + 1):
        result = 2 * first
        first = result

    return result


def jump2(n):
    if n == 0:
        return 0
    res = jump(n)
    return res


def jump(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return 2 * jump2(n - 1)


print(jumpFloorII(3), jump2(3))
print(jumpFloorII(2), jump2(2))
print(jumpFloorII(0), jump2(0))
